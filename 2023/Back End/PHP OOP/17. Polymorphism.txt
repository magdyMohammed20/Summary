(1) Polymoriphism
------------------
==> Describes Pattern In OOP In Which Classes Has Different Functionality While Sharing A Common Interface
==> Polymoriphism Has Methods Without Body Code

EX
---

    <?php

        // Polymoriphism Uses The 'interface'
        interface mobile{
            // This Method Must Be Declared In Child Classes
            public function sayHellow();
        }

        // For Inherit The Interface We Use 'implements' Keyword
        class Iphone implements mobile{
            // Must Declare All Interface Methods
            public function sayHellow(){
                echo 'Hellow From iPhone';
            }
        }

        class Sony implements mobile{

            public function sayHellow(){
                echo 'Hellow From Sony';
            }
        }

        $iphone = new Iphone();
        echo $iphone->sayHellow() . '<br>'; // Hellow From iPhone
        print_r($iphone); // Iphone Object ( )

        echo '<br>';

        $sony = new Sony();
        echo $sony->sayHellow() . '<br>'; // Hellow From Sony
        print_r($sony); // Sony Object ( )
    ?>


EX
---

    <?php

        interface DBconnect{
            public function getUsers();
            public function getArticles();
            public function showStats();
        }

        class MYSQL implements DBconnect{
            public function getUsers(){
                echo 'SELECT * FROM users' . '<br>';
            }

            public function getArticles(){
                echo 'SELECT * FROM articles' . '<br>';
            }

            public function showStats(){
                echo 'SELECT * FROM stats' . '<br>';
            }
        }

        $mysql = new MYSQL();
        $mysql->getUsers(); // SELECT * FROM users
        $mysql->getArticles(); // SELECT * FROM articles
        $mysql->showStats(); // SELECT * FROM stats

    ?>