(1) sort() Method
-------------------
==> Used To Make Ascending Ordering

==> Syntax

    sort(Array_Name , Sorting_Type[Optional])

==> Values Of Sorting_Type
-----------------------------
==> SORT_REGULAR : compare items normally
==> SORT_NUMERIC : compare items numerically
==> SORT_STRING : compare items as strings
==> SORT_LOCALE_STRING : compare items as strings, based on the current locale. It uses the locale, which can be changed using setlocale()
==> SORT_NATURAL : compare items as strings using "natural ordering" like natsort()
==> SORT_FLAG_CASE : can be combined (bitwise OR) with SORT_STRING or SORT_NATURAL to sort strings case-insensitively


EX (Sort Array Alphapitically)
---

    <?php 

        $langs = array(
            'Html',
            'Css',
            'Js',
            'Angular',
            'Php',
            'Vue',
            'React'
        );

        echo '<pre>';
        print_r($langs); // Array( [0] => Html [1] => Css [2] => Js [3] => Angular [4] => Php [5] => Vue [6] => React)
        echo '</pre>';
    
        sort($langs);
        echo '<pre>';
        print_r($langs); // Array ([0] => Angular [1] => Css [2] => Html [3] => Js [4] => Php [5] => React [6] => Vue )
        echo '</pre>';

        
    ?>


EX (Sort Mixed Array)
---

    <?php 

        $langs = array(
            'Html',
            'Css',
            10,
            'Js',
            'Angular',
            20,
            'Php',
            'Vue',
            30,
            'React'
        );

        echo '<pre>';
        print_r($langs); // Array( [0] => Html [1] => Css [2] => 10 [3] => Js [4] => Angular [5] => 20 [6] => Php [7] => Vue [8] => 30 [9] => React )
        echo '</pre>';
    
        sort($langs);
        echo '<pre>';
        print_r($langs); // Array( [0] => Angular [1] => Css [2] => Html [3] => Js [4] => Php [5] => React [6] => Vue [7] => 10 [8] => 20 [9] => 30 )
        echo '</pre>';

        
    ?>


EX (SORT_REGULAR) Is Default Sort Type
---

    <?php 

        $langs = array(
            'Html',
            'Css',
            10,
            'Js',
            'Angular',
            20,
            'Php',
            'Vue',
            30,
            'React'
        );

        echo '<pre>';
        print_r($langs); // Array( [0] => Html [1] => Css [2] => 10 [3] => Js [4] => Angular [5] => 20 [6] => Php [7] => Vue [8] => 30 [9] => React )
        echo '</pre>';
    
        sort($langs , SORT_REGULAR );
        echo '<pre>';
        print_r($langs); // Array( [0] => Angular [1] => Css [2] => Html [3] => Js [4] => Php [5] => React [6] => Vue [7] => 10 [8] => 20 [9] => 30 )
        echo '</pre>';

        
    ?>


(2) rsort() Method
-------------------
==> Make Reverse Of sort() Method

==> Syntax

    rsort(Array_Name , Sorting_Type[Optional])


EX
---

    <?php 

        $langs = array(
            'Html',
            'Css',
            10,
            'Js',
            'Angular',
            20,
            'Php',
            'Vue',
            30,
            'React'
        );

        echo '<pre>';
        print_r($langs); // Array( [0] => Html [1] => Css [2] => 10 [3] => Js [4] => Angular [5] => 20 [6] => Php [7] => Vue [8] => 30 [9] => React )
        echo '</pre>';
    
        rsort($langs , SORT_REGULAR );
        echo '<pre>';
        print_r($langs); // Array( [0] => 30 [1] => 20 [2] => 10 [3] => Vue [4] => React [5] => Php [6] => Js [7] => Html [8] => Css [9] => Angular)
        echo '</pre>';

    ?>