(1) Create Table Header Sticky
---------------------------------
==> Step1: Install 'react-table-sticky' Library [yarn add react-table-sticky]
==> Step2: Install 'styled-components' Library [yarn add styled-components]
==> Step3: Create 'TableStyle.js' File In 'Components' Folder And Get Content Of It From 'react-table-sticky' Github Repo
==> Step4: In 'StickyTable.js' Import 'useBlockLayout'From 'react-table' And 'useSticky' Hook From 'react-table-sticky'
==> Step5: In 'StickyTable.js' Pass 'useBlockLayout' And 'useSticky' To 'useTable' Hook

==> Step6: From 'react-table-sticky' Github Repo Copy <Styles> Element And Set Inside 'StickyTable.js' Component
==> Step7: In 'StickyTable.js' Import 'Styles' From 'TableStyle.js'
==> Step8: In 'Columns.js' You Can Specify Which Column Can Be Sticky By Add [sticky: 'left'] To Column Object


    TableStyle.js
    ---------------

    import styled from 'styled-components'

    export const Styles = styled.div`
        .table {
            border: 1px solid #ddd;

            .tr {
            :last-child {
                .td {
                border-bottom: 0;
                }
            }
            }

            .th,
            .td {
            padding: 5px;
            border-bottom: 1px solid #ddd;
            border-right: 1px solid #ddd;
            background-color: #fff;
            overflow: hidden;

            :last-child {
                border-right: 0;
            }
            }

            &.sticky {
            overflow: scroll;
            .header,
            .footer {
                position: sticky;
                z-index: 1;
                width: fit-content;
            }

            .header {
                top: 0;
                box-shadow: 0px 3px 3px #ccc;
            }

            .footer {
                bottom: 0;
                box-shadow: 0px -3px 3px #ccc;
            }

            .body {
                position: relative;
                z-index: 0;
            }

            [data-sticky-td] {
                position: sticky;
            }

            [data-sticky-last-left-td] {
                box-shadow: 2px 0px 3px #ccc;
            }

            [data-sticky-first-right-td] {
                box-shadow: -2px 0px 3px #ccc;
            }
            }
        }
    `;


    StickyTable.js
    ---------------

    import React , {useMemo} from 'react'
    // Step4: In 'StickyTable.js' Import 'useBlockLayout'From 'react-table' And 'useSticky' Hook From 'react-table-sticky'
    import {useTable , useBlockLayout} from 'react-table'
    import { useSticky } from 'react-table-sticky'  
    import {Styles} from './TableStyle' // Step7: In 'StickyTable.js' Import 'Styles' From 'TableStyle.js'   
    import {COLUMNS} from './Columns'        
    import MOCK_DATA from './MOCK_DATA.json' 
    import './style.css'

    function StickyTable() {

        const columns = useMemo(() => COLUMNS , [])
        const data = useMemo(() => MOCK_DATA , [])

        //  Step5: In 'StickyTable.js' Pass 'useBlockLayout' And 'useSticky' To 'useTable' Hook
        const tableInstance = useTable({ columns,data },useBlockLayout , useSticky)
        
        const {
            getTableProps,
            getTableBodyProps,
            headerGroups,
            rows,
            prepareRow,
        } = tableInstance

        return (
            
            <Styles>
                {/*  Step6: From 'react-table-sticky' Github Repo Copy <Styles> Element And Set Inside 'StickyTable.js' Component */}
                <div {...getTableProps()} className="table sticky" style={{ width: 1000, height: 500 }}>
                    <div className="header">
                        {headerGroups.map((headerGroup) => (
                        <div {...headerGroup.getHeaderGroupProps()} className="tr">
                            {headerGroup.headers.map((column) => (
                            <div {...column.getHeaderProps()} className="th">
                                {column.render('Header')}
                            </div>
                            ))}
                        </div>
                        ))}
                    </div>
                    <div {...getTableBodyProps()} className="body">
                        {rows.map((row) => {
                        prepareRow(row);
                        return (
                            <div {...row.getRowProps()} className="tr">
                            {row.cells.map((cell) => (
                                <div {...cell.getCellProps()} className="td">
                                {cell.render('Cell')}
                                </div>
                            ))}
                            </div>
                        );
                        })}
                    </div>
                </div>
        </Styles>
        )
    }

    export default StickyTable



    Columns.js
    --------------

    import {format} from 'date-fns'

    export const COLUMNS = [
        {
            Header: 'id',
            accessor: 'id',
            sticky: 'left'
        },
        {
            Header: 'first_name',
            accessor: 'first_name',
            sticky: 'left'
        },
        {
            Header: 'last_name',
            accessor: 'last_name',
            sticky: 'left'
        },
        {
            Header: 'email',
            accessor: 'email'
        },
        {
            Header: 'gender',
            accessor: 'gender'
        },
        {
            Header: 'date',
            accessor: 'date',
            Cell: ({value}) => format(new Date(value) , 'dd/MM/yyyy')
        }
    ]