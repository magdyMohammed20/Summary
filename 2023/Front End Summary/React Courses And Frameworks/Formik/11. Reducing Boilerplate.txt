(1) In The Following Code You Note That Inputs Properties [onChange , onBlur , value] Is Repeated Inside Each Input And This Is Called Boilerplate Code
---------------------------------------------------------------------------------------------------------------------------------


	import React from 'react'
	import './Form.css'
	import { useFormik } from 'formik'
	import * as Yup from 'yup'

	let initialValues = { name: '', email: '', channel: '' }

	let onSubmit = val => {
	    console.log(`Name Is `, `${val.name}`)
	    console.log(`Email Is `, `${val.email}`)
	    console.log(`Channel Is `, `${val.channel}`)
	}


	let validationSchema = Yup.object({
	    name: Yup.string().required('Name Is Required'),
	    email: Yup.string().email('Invalid Email Format').required('Email Is Required'),
	    channel: Yup.string().required('Channel Is Required')
	})
	export default function Form() {

	    const data = useFormik({
		initialValues,
		onSubmit,
		validationSchema
	    })


	    return (
		<div>
		    <form onSubmit={data.handleSubmit}>
		        <div>
		            <label htmlFor="name">Name</label>

		            <input
		                type="text"
		                name="name"
		                id="name"
		                onChange={data.handleChange}
		                onBlur={data.handleBlur}
		                value={data.values.name}
		            />
		            <div style={{ color: 'red' }}>
		                {data.touched.name && data.errors.name ? data.errors.name : null}
		            </div>
		        </div>
		        <div>
		            <label htmlFor="email">Email</label>
		            <input
		                type="email"
		                name="email"
		                id="email"
		                onChange={data.handleChange}
		                onBlur={data.handleBlur}
		                value={data.values.email}
		            />
		            <div style={{ color: 'red' }}>
		                {data.touched.email && data.errors.email ? data.errors.email : null}
		            </div>
		        </div>
		        <div>
		            <label htmlFor="channel">Channel</label>
		            <input
		                type="text"
		                name="channel"
		                id="channel"
		                onChange={data.handleChange}
		                onBlur={data.handleBlur}
		                value={data.values.channel}
		            />
		            <div style={{ color: 'red' }}>
		                {data.touched.channel && data.errors.channel ? data.errors.channel : null}
		            </div>
		        </div>
		        <button type="submit">Submit</button>
		    </form>
		</div>
	    )
	}
	
	
	
	App.js
	--------
	
	import React, { Component } from 'react';
	import './App.css';
	import Form from './Components/Form'
	class App extends Component {

	  render() {

	    return (
	      <div className="App">
		<Form />
	      </div >

	    );
	  }
	}

	export default App;



(2) To Reduce Boilerplate Code We Use getFieldProps() Method To Replace 'onChange And onBlur And value' Of The Input As It Contains 'onChange And onBlur And value' As Properties [ Note That getFieldProps() Return Object That Contains onChange And onBlur And value]
----------------------------------------------------------------------------------------------------------------------------




	Form.js
	----------
	
	import React from 'react'
	import './Form.css'
	import { useFormik } from 'formik'
	import * as Yup from 'yup'

	let initialValues = { name: '', email: '', channel: '' }

	let onSubmit = val => {
	    console.log(`Name Is `, `${val.name}`)
	    console.log(`Email Is `, `${val.email}`)
	    console.log(`Channel Is `, `${val.channel}`)
	}


	let validationSchema = Yup.object({
	    name: Yup.string().required('Name Is Required'),
	    email: Yup.string().email('Invalid Email Format').required('Email Is Required'),
	    channel: Yup.string().required('Channel Is Required')
	})
	export default function Form() {

	    const data = useFormik({
		initialValues,
		onSubmit,
		validationSchema
	    })

	    return (
		<div>
		    <form onSubmit={data.handleSubmit}>
		        <div>
		            <label htmlFor="name">Name</label>
		            {/* Use getFieldProps Here And Pass Input Name To It*/}
		            <input
		                type="text"
		                name="name"
		                id="name"
		                {...data.getFieldProps('name')}
		            />
		            <div style={{ color: 'red' }}>
		                {data.touched.name && data.errors.name ? data.errors.name : null}
		            </div>
		        </div>
		        <div>
		            <label htmlFor="email">Email</label>
		            {/* Use getFieldProps Here And Pass Input Name To It*/}
		            <input
		                type="email"
		                name="email"
		                id="email"
		                {...data.getFieldProps('email')}
		            />
		            <div style={{ color: 'red' }}>
		                {data.touched.email && data.errors.email ? data.errors.email : null}
		            </div>
		        </div>
		        <div>
		            <label htmlFor="channel">Channel</label>
		            {/* Use getFieldProps Here And Pass Input Name To It*/}
		            <input
		                type="text"
		                name="channel"
		                id="channel"
		                {...data.getFieldProps('channel')}
		            />
		            <div style={{ color: 'red' }}>
		                {data.touched.channel && data.errors.channel ? data.errors.channel : null}
		            </div>
		        </div>
		        <button type="submit">Submit</button>
		    </form>
		</div>
	    )
	}
	
	
	
	App.js
	--------
	
	import React, { Component } from 'react';
	import './App.css';
	import Form from './Components/Form'
	class App extends Component {

	  render() {

	    return (
	      <div className="App">
		<Form />
	      </div >

	    );
	  }
	}

	export default App;

