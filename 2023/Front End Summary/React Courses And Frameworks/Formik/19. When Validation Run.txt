(1) Validation Run In This Cases
---------------------------------
==> When Focus On Any Input In The Form Then Blur From It
==> When Start Typying In Any Form Input
==> When Click On Submit Button And Any Or All Form Inputs Is Empty


EX: Validation Cases
----------------------

	Form.js
	--------
	
	import React from 'react'
	import './Form.css'
	import { Formik, Form, Field, ErrorMessage, FastField } from 'formik'
	import * as Yup from 'yup'

	let initialValues = { name: '', email: '', channel: '', address: '' }

	let onSubmit = val => {
	    console.log(`Name Is `, `${val.name}`)
	    console.log(`Email Is `, `${val.email}`)
	    console.log(`Channel Is `, `${val.channel}`)
	    console.log(`Address Is `, `${val.address}`)
	}


	let validationSchema = Yup.object({
	    name: Yup.string().required('Name Is Required'),
	    email: Yup.string().email('Invalid Email Format').required('Email Is Required'),
	    channel: Yup.string().required('Channel Is Required'),
	    address: Yup.string().required('Address Is Required')
	})
	export default function FormikForm() {
	    return (
		<Formik
		    initialValues={initialValues}
		    onSubmit={onSubmit}
		    validationSchema={validationSchema}
		>
		    <Form>
		        <div>
		            <label htmlFor="name">Name</label>
		            <Field
		                type="text"
		                name="name"
		                id="name"
		            />
		            <div style={{ color: 'red' }}>
		                <ErrorMessage name="name" />
		            </div>
		        </div>
		        <div>
		            <label htmlFor="email">Email</label>
		            <Field
		                type="email"
		                name="email"
		                id="email"
		            />
		            <div style={{ color: 'red' }}>
		                <ErrorMessage name="email" />
		            </div>
		        </div>
		        <div>
		            <label htmlFor="channel">Channel</label>
		            <Field
		                type="text"
		                name="channel"
		                id="channel"
		            />
		            <div style={{ color: 'red' }}>
		                <ErrorMessage name="channel" />
		            </div>
		        </div>

		        <div>
		            <label htmlFor='address'>address</label>
		            <FastField name='address'>
		                {

		                    (props) => {

		                        const { field, form, meta } = props
		                        console.log(form.errors)
		                        return (
		                            <div>
		                                <input id='address' {...field} />
		                                {meta.touched && meta.error ? <div>{meta.error}</div> : null}
		                            </div>
		                        )
		                    }
		                }
		            </FastField>
		        </div>
		        <button type="submit">Submit</button>
		    </Form>
		</Formik>
	    )
	}
	
	
	
	App.js
	--------
	
	import React, { Component } from 'react';
	import './App.css';
	import FormikForm from './Components/Form'
	class App extends Component {

	  render() {

	    return (
	      <div className="App">
		<FormikForm />
	      </div >

	    );
	  }
	}

	export default App;




(2) Formik Provides Some Props To Control The Validation Cases
------------------------------------------------------------
==> validateOnChange : Used To Enable Or Disable Validation When Change Value Of Any Form Inputs Or Start Typying In Form Input [Disable = false , enable = true]
==> validateOnBlur : Used To Enable Or Disable Validation When Blur From Any Form Inputs [Disable = false , enable = true]



EX : This Example Not Show Error Validation Messages When Typying Or Blur From The Form Inputs
---


	Form.js
	-----------
	
	import React from 'react'
	import './Form.css'
	import { Formik, Form, Field, ErrorMessage, FastField } from 'formik'
	import * as Yup from 'yup'

	let initialValues = { name: '', email: '', channel: '', address: '' }

	let onSubmit = val => {
	    console.log(`Name Is `, `${val.name}`)
	    console.log(`Email Is `, `${val.email}`)
	    console.log(`Channel Is `, `${val.channel}`)
	    console.log(`Address Is `, `${val.address}`)
	}


	let validationSchema = Yup.object({
	    name: Yup.string().required('Name Is Required'),
	    email: Yup.string().email('Invalid Email Format').required('Email Is Required'),
	    channel: Yup.string().required('Channel Is Required'),
	    address: Yup.string().required('Address Is Required')
	})
	export default function FormikForm() {
	    return (
		<Formik
		    initialValues={initialValues}
		    onSubmit={onSubmit}
		    validationSchema={validationSchema}
		    validateOnChange={false}
		    validateOnBlur={false}
		>
		    <Form>
		        <div>
		            <label htmlFor="name">Name</label>
		            <Field
		                type="text"
		                name="name"
		                id="name"
		            />
		            <div style={{ color: 'red' }}>
		                <ErrorMessage name="name" />
		            </div>
		        </div>
		        <div>
		            <label htmlFor="email">Email</label>
		            <Field
		                type="email"
		                name="email"
		                id="email"
		            />
		            <div style={{ color: 'red' }}>
		                <ErrorMessage name="email" />
		            </div>
		        </div>
		        <div>
		            <label htmlFor="channel">Channel</label>
		            <Field
		                type="text"
		                name="channel"
		                id="channel"
		            />
		            <div style={{ color: 'red' }}>
		                <ErrorMessage name="channel" />
		            </div>
		        </div>

		        <div>
		            <label htmlFor='address'>address</label>
		            <FastField name='address'>
		                {

		                    (props) => {

		                        const { field, form, meta } = props
		                        console.log(form.errors)
		                        return (
		                            <div>
		                                <input id='address' {...field} />
		                                {meta.touched && meta.error ? <div>{meta.error}</div> : null}
		                            </div>
		                        )
		                    }
		                }
		            </FastField>
		        </div>
		        <button type="submit">Submit</button>
		    </Form>
		</Formik>
	    )
	}
	
	
	
	App.js
	--------
	
	import React, { Component } from 'react';
	import './App.css';
	import FormikForm from './Components/Form'
	class App extends Component {

	  render() {

	    return (
	      <div className="App">
		<FormikForm />
	      </div >

	    );
	  }
	}

	export default App;

