(1) First Example Of 'useReducer' (Use The State As Variable)
------------------------------------

	import React , {useReducer} from 'react'; // Import 'useReducer'


	const initialState = 0 // Create Initial State

	// Create Reducer Function That Takes 2 Args , Current State And Action
	const reducer = (state , action) =>{
	    switch(action){
		case 'increment':
		    return state + 1

		case 'decrement':
		    return state - 1

		case 'reset':
		    return state - state

		default: return state
	    }
	}

	const CompA = () => {
	    // Create 'userReducer' Hook That Takes 2 Args , Reducer And Initial State
	    // And Returns The New State And Dispatch Action
	    const [count , dispatch] = useReducer(reducer , initialState)

	    return (
		<div>
		    {/* Display New State And Dispatch The Created Actions */}
		    Counter: {count}
		    <button onClick={()=> dispatch('increment')}>+</button>
		    <button onClick={()=> dispatch('decrement')}>-</button>
		    <button onClick={()=> dispatch('reset')}>[]</button>
		</div>
	    );
	};

	export default CompA;



(2) Second Example Of 'useReducer' (Use The State As Object)
------------------------------------


	import React , {useReducer} from 'react';

	const intialState = {counter: 0}

	const reducer = (state , action) => {
	    switch(action){
		case 'increment':
		    return {counter: state.counter + 1}
		    
		case 'decrement':
		    return {counter: state.counter - 1}

		case 'reset':
		    return {counter: 0}

		default: return {counter: state.counter }
	    }
	}
	const CompA = () => {

	    const [newState , dispatch] = useReducer(reducer , intialState)
	    return (
		<div>
		    {newState.counter}
		    <button onClick={()=> dispatch('increment')}>+</button>
		    <button onClick={()=> dispatch('decrement')}>-</button>
		    <button onClick={()=> dispatch('reset')}>0</button>
		</div>
	    );
	};

	export default CompA;


(3) Third Example Of 'usereducer' (Passing Value To Action)
---------------------------------

	import React , {useReducer} from 'react';

	const intialState = {counter: 0}

	const reducer = (state , action) => {
	    switch(action.type){
		case 'increment':
		    return {counter: state.counter + action.value}
		    
		case 'decrement':
		    return {counter: state.counter - action.value}

		case 'reset':
		    return {counter: 0}

		default: return {counter: state.counter }
	    }
	}
	const CompA = () => {

	    const [newState , dispatch] = useReducer(reducer , intialState)
	    return (
		<div>
		    {newState.counter}
		    {/* Can Pass Value To The Action And Increment Depends On The Action Value */}
		    <button onClick={()=> dispatch({type: 'increment' , value: 1})}>+</button>
		    <button onClick={()=> dispatch({type: 'decrement' , value: 1})}>-</button>
		    <button onClick={()=> dispatch({type: 'increment' , value: 5})}>+5</button>
		    <button onClick={()=> dispatch({type: 'decrement' , value: 5})}>-5</button>
		    <button onClick={()=> dispatch({type: 'reset'})}>0</button>
		</div>
	    );
	};

	export default CompA;



(4) Fourth Example Of 'useReducer' (Saving The Another State Variables)
-------------------------------------

	import React , {useReducer} from 'react';

	const intialState = {counter1: 0 , counter2: 0}

	// Use Spread Operator For Save 'Counter2' When 'Counter1' Changed
	const reducer = (state , action) => {
	    switch(action.type){
		case 'increment':
		    return {...state , counter1: state.counter1 + action.value}
		    
		case 'decrement':
		    return {...state , counter1: state.counter1 - action.value}

		case 'reset':
		    return {...state , counter1: 0}

		default: return state
	    }
	}
	const CompA = () => {

	    const [newState , dispatch] = useReducer(reducer , intialState)
	    return (
		<div>
		    Counter1: {newState.counter1}<br/>
		    Counter2: {newState.counter2} <br/>
		    <button onClick={()=> dispatch({type: 'increment' , value: 1})}>+</button>
		    <button onClick={()=> dispatch({type: 'decrement' , value: 1})}>-</button>
		    <button onClick={()=> dispatch({type: 'increment' , value: 5})}>+5</button>
		    <button onClick={()=> dispatch({type: 'decrement' , value: 5})}>-5</button>
		    <button onClick={()=> dispatch({type: 'reset'})}>0</button>
		</div>
	    );
	};

	export default CompA;



(5) Fifth Example Of 'useReducer' (Multi State Variables)
----------------------------------

	import React , {useReducer} from 'react';

	const intialState = {counter1: 0 , counter2: 0}

	// Use Spread Operator For Save 'Counter2' When 'Counter1' Changed
	const reducer = (state , action) => {
	    switch(action.type){
		// For Counter1
		case 'increment':
		    return {...state , counter1: state.counter1 + action.value}
		    
		// For Counter1
		case 'decrement':
		    return {...state , counter1: state.counter1 - action.value}

		// For Counter2
		case 'increment2':
		    return {...state , counter2: state.counter2 + action.value}
		    
		case 'decrement2':
		    return {...state , counter2: state.counter2 - action.value}

		case 'reset':
		    return {counter1: 0 , counter2: 0}

		default: return state
	    }
	}
	const CompA = () => {

	    const [newState , dispatch] = useReducer(reducer , intialState)
	    return (
		<div>
		    Counter1: {newState.counter1}<br/>
		    Counter2: {newState.counter2} <br/>

		    {/* For Counter1 */}
		    <button onClick={()=> dispatch({type: 'increment' , value: 1})}>Counter1 + 1</button>
		    <button onClick={()=> dispatch({type: 'decrement' , value: 1})}>Counter1 - 1</button>
		    <button onClick={()=> dispatch({type: 'increment' , value: 5})}>Counter1 + 5</button>
		    <button onClick={()=> dispatch({type: 'decrement' , value: 5})}>Counter1 - 5</button>

		    {/* For Counter2 */}
		    <button onClick={()=> dispatch({type: 'increment2' , value: 1})}>Counter2 + 1</button>
		    <button onClick={()=> dispatch({type: 'decrement2' , value: 1})}>Counter2 - 1</button>
		    <button onClick={()=> dispatch({type: 'increment2' , value: 5})}>Counter2 + 5</button>
		    <button onClick={()=> dispatch({type: 'decrement2' , value: 5})}>Counter2 - 5</button>
		    <button onClick={()=> dispatch({type: 'reset'})}>0</button>
		</div>
	    );
	};

	export default CompA;

