(1) Why Use Higher Order Components
------------------------------------
==> To Share Common Functionality Between Components


(2) What Is Higher Order Components [HOC]
-----------------------------------------
==> A Pattern Where A Function Takes A Component As An Argument And Returns A New Component 

==> Syntax: const newComponent = HigherOrderComponent(OriginalComponent)



(3) HOC First Example [But Counter Here Not Share Between Counter.js And Counter2.js]
---------------------

	Hoc.js
	---------
	
	import React from 'react'

	/*
		Hoc: Is Higher Order Component
		OriginalComponent: Is Argument Component
	*/
	const Hoc = OriginalComponent => {

	    class newComponent extends React.Component {
		render() {
		    return <OriginalComponent name="Magdy" />
		}
	    }

	    return newComponent
	}

	export default Hoc
	
	
	
	Counter.js [Counter With Clicking Button]
	-----------
	
	import React, { Component } from 'react'
	import Hoc from './Hoc' // Note Here

	class Counter extends Component {

	    state = {
		counter: 0
	    }

	    increment = () => {
		this.setState(prevState => {
		    return {
		        counter: prevState.counter + 1
		    }
		})
	    }

	    render() {
		const { counter } = this.state
		return (
		    <div>
		    	{/* We Access Hoc Name Here */}
		        <button onClick={this.increment}>Click {counter} Times And Name Is {this.props.name}</button>
		    </div>
		)
	    }
	}

	export default Hoc(Counter) // Note Here
	
	
	
	Counter2.js [Counter With Hover On Element]
	------------
	
	import React, { Component } from 'react'
	import Hoc from './Hoc' // Note Here

	class Counter2 extends Component {
	    state = {
		counter: 0
	    }

	    increment = () => {
		this.setState(prevState => {
		    return {
		        counter: prevState.counter + 1
		    }
		})
	    }

	    render() {
		const { counter } = this.state
		return (
		    <div>
		    	{/* We Access Hoc Name Here */}
		        <h1 onMouseEnter={this.increment}>Hover {counter} Times And Name Is {this.props.name}</h1>
		    </div>
		)
	    }
	}

	export default Hoc(Counter2)  // Note Here
	
	
	
	App.js
	---------
	
	import React from 'react';
	import './App.css';
	import Counter from './Components/Counter'
	import Counter2 from './Components/Counter2'

	function App() {
	  return (
	    <div className="App">
	      <Counter />
	      <Counter2 />
	    </div>

	  );
	}

	export default App;






(3) HOC Second Example [Reusable Code]
---------------------

	Hoc.js
	---------
	
	import React from 'react'

	/*
	Hoc: Is Higher Order Component
	OriginalComponent: Is Argument Component
	*/
	const Hoc = OriginalComponent => {

	    class newComponent extends React.Component {
		state = {
		    counter: 0
		}

		increment = () => {
		    this.setState(prevState => {
		        return {
		            counter: prevState.counter + 1
		        }
		    })
		}

		render() {
		    return <OriginalComponent counter={this.state.counter} increment={this.increment} />
		}
	    }

	    return newComponent
	}

	export default Hoc
	
	
	
	Counter.js [Counter With Clicking Button]
	-----------
	
	import React, { Component } from 'react'
	import Hoc from './Hoc'

	class Counter extends Component {

	    render() {
		const { counter, increment } = this.props
		return (
		    <div>
		        <button onClick={increment}>Click {counter} Times</button>
		    </div>
		)
	    }
	}

	export default Hoc(Counter)
	
	
	
	Counter2.js [Counter With Hover On Element]
	------------
	
	import React, { Component } from 'react'
	import Hoc from './Hoc'

	class Counter2 extends Component {

	    render() {
		const { counter, increment } = this.props
		return (
		    <div>
		        <h1 onMouseEnter={increment}>Hover {counter} Times</h1>
		    </div>
		)
	    }
	}

	export default Hoc(Counter2)
	
	
	
	App.js
	---------
	
	import React from 'react';
	import './App.css';
	import Counter from './Components/Counter'
	import Counter2 from './Components/Counter2'

	function App() {
	  return (
	    <div className="App">
	      <Counter />
	      <Counter2 />
	    </div>

	  );
	}

	export default App;





