(1) Static Import Module
--------------------------
==> In The Static Import we can’t dynamically generate any parameters of import
==> In The Static Import The module path must be a primitive string, can’t be a function call. This won’t work [ import ... from getModuleName(); // Error, only from "string" is allowed]
==> In The Static Import we can’t import conditionally or at run-time 
[
	if(...) {
	  import ...; // Error, not allowed!
	}

	{
	  import ...; // Error, we can't put import in any block
	}
]


(2) Dynamic Import Module
--------------------------
==> The import(module) expression loads the module and returns a promise that resolves into a module object that contains all its exports. It can be called from any place in the code

==> Dynamic imports work in regular scripts, they don’t require script type="module".
==> Can Use Dynamic Imports Inside The Blocks And Conditional Blocks 

EX:
-----

	any.js
	-------

	export default function () {
	    return 'Hellow This File Contains Your Personal Data'
	}

	export const data = {
	    fName: 'Magdy',
	    lName: 'Mohammed',
	    age: 23,
	    address: 'Cairo'
	}


	index.js
	--------

	const lazy = async () => {
	    let module = await import('./any.js')

	    // Get The Default Exported Function From [any.js]
	    console.log(module.default())

	    // Get The Exported data Object From [any.js]
	    const { data } = module;
	    console.log(data) // { fName: "Magdy", lName: "Mohammed", age: 23, address: "Cairo" }
	    console.log(data.fName) // Magdy
	    console.log(data.lName) // Mohammed
	    console.log(data.age) // 23
	    console.log(data.address) // Cairo

	}

	// Call The Function For Execute The Import
	lazy()


	index.html
	----------

	<!DOCTYPE html>
	<html lang="en" dir="ltr">

	<head>
	  <meta charset="utf-8">
	  <title>Fetch Data</title>
	  <link rel="stylesheet" href="style.css" />
	</head>

	<body>

	  <!-- Note Here Not Required To Write type="module" -->
	  <script src="./index.js"></script>
	</body>

	</html>
