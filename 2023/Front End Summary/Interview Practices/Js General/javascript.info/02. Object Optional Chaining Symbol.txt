(1) What Optional Chaining Do [?.]
----------------------------------
==> The optional chaining ?. stops the evaluation and returns undefined if the part before ?. is undefined or null

EX1
------

	// If The Properties Not Exist So It Will Produce An Error
	const obj = {}
	//console.log(obj.address.street) // Error obj.address is undefined



EX2
------

	// The optional chaining ?. stops the evaluation and returns undefined if the part before ?. is undefined or null
	const obj2 = {}
	console.log(obj2?.address?.street) // undefined



EX3
------

	// obj3?.name works even if obj3 object doesn’t exist
	// Here It Stops The Evaluation After obj3 Word Only
	const obj3 = null
	console.log(obj3?.name) // undefined


(2) When Use ?.
----------------
==> use ?. only where it’s ok that something doesn’t exist. For example, if according to our coding logic user object must be there, but address is optional, then user.address?.street would be better.
So, if user happens to be undefined due to a mistake, we’ll know about it and fix it. Otherwise, coding errors can be silenced where not appropriate, and become more difficult to debug.


(3) Other cases: ?.(), ?.[]
---------------------------
==> The optional chaining ?. is not an operator, but a special syntax construct, that also works with functions and square brackets. For example, ?.() is used to call a function that may not exist


EX: ?.() With Calling Object Method
---------

	let obj = {
	    sayHi() {
		console.log('Hi')
	    }
	}

	// If Function Not Exist In The Object It Will Produce Nothing 
	obj.sayHellow?.() // Empty Output


EX: ?.[] With Calling Object Properties With [] Instead Of .
---------

	let obj = {
	    name: 'Magdy',
	    age: 20
	}

	// Use ?.[] If Want To Access Object Properties With Square Brackets Instead Of Dot
	// Here Output Will Be Nothing Instead Of 'undefined' As We use ?.[]
	console.log(obj?.['address']) // Empty Output


(4) Use ?. With Delete Property From  The Object
-------------------------------------------------

	let obj = {
	    name: 'Magdy',
	    age: 20,
	    address: 'Cairo'
	}

	console.log(obj) // { name: "Magdy", age: 20, address: "Cairo" }

	delete obj?.address // Delete address Property From The obj If Exist

	console.log(obj) // { name: "Magdy", age: 20 }


(5) We can use ?. for safe reading and deleting, but not writing
-----------------------------------------------------------------
==> The optional chaining ?. has no use at the left side of an assignment


	let obj = {
	    name: 'Magdy',
	    age: 20,
	    address: 'Cairo'
	}


	obj?.name = 'Hossam'

	console.log(obj) // invalid assignment left-hand side
