(1) What Is Promises
---------------------
==> An Object With Properties And Methods Represents The Eventual Completion Or Failure Of An Asynchronous Operation And Provides A Resulting Value


EX
----

	let asyncFunction = function () {
	    return new Promise(function (resolve, reject) {
		setTimeout(function () {
		    resolve("asyncFunction has been resolved");
		}, 5000)
	    });
	};


	// Return An Object With Some Methods [Catch , Constructor , Finally , Then] And Some Other Properties
	console.log(asyncFunction())
	
	
	

(2) Get Promise Result With then() Method
------------------------------------------


	let asyncFunction = function () {
	    return new Promise(function (resolve, reject) {
		setTimeout(function () {
		    resolve("asyncFunction has been resolved");
		}, 5000)
	    });
	};

	// Will Display Promise Result After Some Seconds
	asyncFunction().then(val => {
	    console.log('Result Is ', val) // Result Is asyncFunction has been resolved
	})
	
	
	
(3) If There Are Another Code After Promise Code And Other Code Isn't Promise So The Other Code Will Executed At First Then The Promise Executed After It
------------------------------------------------------------------------------------------------------------------------------


	let asyncFunction = function () {
	    return new Promise(function (resolve, reject) {
		setTimeout(function () {
		    resolve("asyncFunction has been resolved");
		}, 5000)
	    });
	};

	// Will Display Promise Result After Some Seconds
	asyncFunction().then(val => {
	    console.log('Result Is ', val) // Result Is asyncFunction has been resolved
	})

	// Other Code [Printed Firstly]
	console.log('Run Before The Promise')
	
	
	

(4) Promises Solve Problem Of Callback Hell
--------------------------------------------


	asyncFunction = function () {
	    return new Promise(function (resolve, reject) {
		setTimeout(function () {
		    resolve("asyncFunction has been resolved");
		}, 5000)
	    });
	};

	asyncFunction2 = function () {
	    return new Promise(function (resolve, reject) {
		setTimeout(function () {
		    resolve("asyncFunction has been resolved2");
		}, 5000)
	    });
	};

	let promise1 = asyncFunction()

	let promise2 = promise1.then(val => {
	    console.log('Promise2 ' + val) // Run Second [Promise2 asyncFunction has been resolved]
	    return asyncFunction2()
	})

	promise2.then(val => {
	    console.log('Promise 2.1 ', val) // Run At Last [Promise 2.1  asyncFunction has been resolved2]
	})

	console.log('Run Before The Promise') // Run At First [Run Before The Promise]
	
	
	
(5) You Merge Promises With This Way
------------------------------------------


	asyncFunction = function () {
	    return new Promise(function (resolve, reject) {
		setTimeout(function () {
		    resolve("asyncFunction has been resolved");
		}, 5000)
	    });
	};

	asyncFunction2 = function () {
	    return new Promise(function (resolve, reject) {
		setTimeout(function () {
		    resolve("asyncFunction has been resolved2");
		}, 5000)
	    });
	};

	let promise1 = asyncFunction().then(val => {
	    console.log('Promise2 ' + val) // Run Second [Promise2 asyncFunction has been resolved]
	    return asyncFunction2()
	}).then(val => {
	    console.log('Promise 2.1 ', val) // Run At Last [Promise 2.1  asyncFunction has been resolved2]
	})

	console.log('Run Before The Promise') // Run At First [Run Before The Promise]
	
	
	
(6) Fetch Data From API With Promises
---------------------------------------

	fetch("https://jsonplaceholder.typicode.com/users").then(response => {
	    return response.json()
	}).then(data => {
	    console.log(data)
	})
	
	
	
(7) Fetch More Than Data With Promises
-----------------------------------------

==> First Syntax

	// Fetch Users And Photos Data From API
	fetch("https://jsonplaceholder.typicode.com/users").then(response => {
	    return response.json()
	}).then(data => {
	    console.log(data)
	    return fetch("https://jsonplaceholder.typicode.com/photos")
	}).then(response => {
	    return response.json()
	}).then(data => {
	    console.log(data)
	})
	
	
	
==> Second Syntax

	fetch("https://jsonplaceholder.typicode.com/users").then(response => {
	    return response.json().then(data => {
		console.log(data)
		return fetch("https://jsonplaceholder.typicode.com/photos").then(response => {
		    return response.json().then(data => {
		        console.log(data)
		    })
		})
	    })
	})
	
	
	
(8) Use Catch Method For Catch Any Error With Promises
-------------------------------------------------------

	fetch("https:").then(response => {
	    return response.json()
	}).then(data => {
	    console.log(data)
	    return fetch("https:")
	}).then(response => {
	    return response.json()
	}).then(data => {
	    console.log(data)
	}).catch(error => console.log('Error Is ' + error))
