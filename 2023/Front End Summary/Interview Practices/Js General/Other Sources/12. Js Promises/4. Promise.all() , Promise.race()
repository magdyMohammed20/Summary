(1) Promise.all()
------------------
==> takes an array of promises (it technically can be any iterable, but is usually an array) and returns a new promise.
The new promise resolves when all listed promises are settled, and the array of their results becomes its result.


EX
----

	let firstName = function () {
	    return new Promise((resolve, reject) => {
		resolve('My First Name Is Magdy')
	    })
	}


	let lastName = function () {
	    return new Promise((resolve, reject) => {
		resolve('My Last Name Is Mohammed')
	    })
	}


	Promise.all([firstName(), lastName()]).then(msg => {
	    console.log(msg) // ["My First Name Is Magdy", "My Last Name Is Mohammed"]
	})
	
	
	
(2) Promise.all() Rejected Promise
-----------------------------------
==> If Any Promise Inside Promise.all() Is Rejected Promise.all() Produce Error


EX
-----

	let firstName = function () {
	    return new Promise((resolve, reject) => {
		resolve('My First Name Is Magdy')
	    })
	}


	let lastName = function () {
	    return new Promise((resolve, reject) => {
		reject('My Last Name Is Mohammed')
	    })
	}


	Promise.all([firstName(), lastName()]).then(msg => {
	    console.log(msg) // Uncaught (in promise) My Last Name Is Mohammed
	})
	
	
	
EX (Handle Promise.all Rejection With 'catch' Method)
----

	let firstName = function () {
	    return new Promise((resolve, reject) => {
		reject('My First Name Is Magdy')
	    })
	}


	let lastName = function () {
	    return new Promise((resolve, reject) => {
		resolve('My Last Name Is Mohammed')
	    })
	}

	
	Promise.all([firstName(), lastName()]).then(msg => {
	    console.log(msg) // My First Name Is Magdy
	}).catch(error => console.log(error))
	
	
	
(3) Promise.race()
--------------------
==> Similar to Promise.all, but waits only for the first settled promise and gets its result (or error).

EX
-----

	let firstName = function () {
	    return new Promise((resolve, reject) => {
		setTimeout(() => {
		    resolve('My First Name Is Magdy')
		}, 4000)
	    })
	}


	let lastName = function () {
	    return new Promise((resolve, reject) => {
		setTimeout(() => {
		    resolve('My Last Name Is Mohammed')
		}, 3000)
	    })
	}

	Promise.race([firstName(), lastName()]).then(msg => {
	    console.log(msg) //My Last Name Is Mohammed
	}).catch(error => console.log(error))




EX
-----

	let firstName = function () {
	    return new Promise((resolve, reject) => {
		resolve('My First Name Is Magdy')
	    })
	}


	let lastName = function () {
	    return new Promise((resolve, reject) => {
		resolve('My Last Name Is Mohammed')
	    })
	}

	Promise.race([firstName(), lastName()]).then(msg => {
	    console.log(msg) // My First Name Is Magdy
	}).catch(error => console.log(error))
	
	
	
EX [If All Promises Rejected With Promise.all() Or Promise.race() The Returned Result Is Result Of The First Rejected Promise Result]
----

	let firstName = function () {
	    return new Promise((resolve, reject) => {
		setTimeout(() => {
		    reject('My First Name Is Magdy')
		}, 4000)
	    })
	}


	let lastName = function () {
	    return new Promise((resolve, reject) => {
		setTimeout(() => {
		    reject('My Last Name Is Mohammed')
		}, 3000)
	    })
	}

	Promise.race([firstName(), lastName()]).then(msg => {
	    console.log(msg) //My Last Name Is Mohammed
	}).catch(error => console.log(error))
