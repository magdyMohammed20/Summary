(1) 'then' Function Accept 2 Parameters First Parameter Is Function Executed When Promise Success And Second Is Function Executed When Promise Rejected
---------------------------------------------------------------------------------------------------------------------------------

	fetch('https://jsonplaceholder.typicode.com/users')
	    .then(res => {
		return res.json()
	    }, reject => {
		console.log(reject)
	    })
	    .then(data => console.log(data))
	    .catch(err => console.log(err))
	    
	    
	    
(2) Create Promise
--------------------

	let prom = new Promise((resolve, reject) => {
	    setTimeout(function () {
		resolve('Hellow I\'m Resolve')
	    }, 3000)
	})

	// Return Promise Object With 'PromiseStatus' Is 'Pending' And If Wait For 3 seconds The 'PromiseStatus' Will Be 'Resolved'
	console.log(prom)
	
	
	
	
(3) Print Promise Result
-------------------------

	let prom = new Promise((resolve, reject) => {
	    setTimeout(function () {
		resolve('Hellow I\'m Resolve')
	    }, 3000)
	})

	// Print Promise Result In The Console [And Executed As resolve() Is Invoked Inside 'prom']
	prom.then(val => {
	    console.log(val) // Hellow I'm Resolve
	})
	
	
	
(4) Reject Function Inside 'then'
---------------------------------

	let prom = new Promise((resolve, reject) => {
	    setTimeout(function () {
		reject('Hellow I\'m Rejected')
	    }, 3000)
	})

	// 'then' accept Second Parameter As Function That Executed If Call 'reject' Inside 'prom'
	prom.then(val => {
	    console.log(val) // Hellow I'm Rejected
	}, val => console.log(val))
	
	

(5) Creating Method Like 'setTimeOut' But With Promise
-------------------------------------------------------

	let setTimeOutP = (time) => {
	    return new Promise((resolve, reject) => {
		setTimeout(resolve, time)
	    })
	}

	setTimeOutP(3000).then(() => console.log('Done')) // Print 'Done' In Console After 3 Seconds
	
	
	
(6) Creating Method Like 'setTimeOut' With Promise And Produce Error If The Passed Time Is Not Number
------------------------------------------------------------------------------------------------------


	let setTimeOutP = (time) => {
	    return new Promise((resolve, reject) => {
		if (isNaN(time)) {
		    reject('Time Must Be Number!!')
		}
		setTimeout(resolve, time)
	    })
	}

	// Here The Time Passed Is 'dd' And It Isn't A Number So The Output Is 'Time Must Be Number!!'
	setTimeOutP('dd')
	    .then(() => console.log('Done'))
	    .catch(error => console.log(error))
