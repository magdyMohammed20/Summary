(1) Js Callbacks
----------------
==> Is Function That Is Invoked Or Called After Something Else Happens


EX (setTimeout Accept Callback Function)
----

	let func = function () { console.log('Hellow') }

	// func Here Called Callback Function As It Wait For 4 Seconds The Print 'Hellow'
	setTimeout(func, 4000)
	
	
	
EX (Event Listener Accept Callbacks)
----

	let btn = document.getElementById('btn')
	
	// Print Button Name
	btn.addEventListener('click', function (e) {
	  console.log(`You Clicked '${e.target.textContent}' Button`) // You Clicked 'Add Product' Button
	})
	
	
EX (Filter The Passed Students)
-----


	let students = [
	  { name: 'Magdy', score: 20, school: 'West' },
	  { name: 'Mohammed', score: 10, school: 'East' },
	  { name: 'Ali', score: 30, school: 'East' },
	  { name: 'Hossam', score: 15, school: 'East' }
	]

	let filter = function (data, callback) {
	  for (var x = 0; x < data.length; x++) {
	    if (data[x].school.toLowerCase() === 'east') {
	      // Call The Callback Function And Pass The Right Object To It
	      callback(data[x])
	    }
	  }
	}

	// Callback Function
	let callback = function (obj) {
	  // Check The Score Property Of The Passed Object
	  if (obj.score >= 15) {
	    console.log(`${obj.name} Is Passed`)
	  }
	}

	filter(students, callback) /*
		                      Ali Is Passed
		                      Hossam Is Passed
		                   */
