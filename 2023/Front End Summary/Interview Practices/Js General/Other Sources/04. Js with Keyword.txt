(1) With Keyword
-----------------
==> 'with' keyword is used as a kind of shorthand for referencing an object's properties or methods

==> The object specified as an argument to with becomes the default object for the duration of the block that follows. The properties and methods for the object can be used without naming the object


(2) 'with' Syntax
-----------------

	with (object){
	   properties used without the object name and dot
	}

(3) 'with' Examples
-------------------

	const obj = {
	    fName: 'magdy ',
	    lName: 'Mohammed',
	    age: 20
	}


	// Access Object Elements
	with (obj) {
	    console.log(
		`
		    First Name : ${fName}
		    lName: ${lName}
		    Age: ${age} 
		`
	    )
	}

	// Access Math Elements
	with (Math) {
	    console.log(PI)
	}


	// Access Document Elements
	with (document) {
	    write('Hellow World')
	}



(4) 'with' Is Deprecated
-------------------------

	// Look At This Example To Know Why Deprecated
	function foo(arg) {
	    with (arg) {
		console.log(arg)
	    }
	}

	foo({}) // {}

	foo('Hellow') // 'Hellow'

	foo({ arg: 'no' }) // 'no'


==> Performance: one cannot optimize the access to arg (or to any other variable used inside with), because one cannot predict whether arg will refer to a real variable or to a property inside the with argument. That can change with each call

==> Security: you cannot determine what an identifier refers to by looking at its syntactic surroundings (its lexical environment). According to Brendan Eich that was the actual reason why with was deprecated, not performance considerations. Quoting a tweet of his:

    with violates lexical scope, making program analysis (e.g. for security) hard to infeasible
