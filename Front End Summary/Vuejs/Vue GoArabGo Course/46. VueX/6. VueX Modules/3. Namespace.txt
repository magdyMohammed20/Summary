(1) Used When The RootState And Local State Or Twice Local States
    Has The Same Name Of Getter Function , As If There Are 2
    Getters Function Has Same Name Will Produce Error [duplicate getter key]
    So We Will Use Namespace For Solve This Problem
--------------------------------------------------------------

==> Problem
---------------

    store.js
    ---------

    import Vue from "vue";
    import Vuex from "vuex";
    import CounterModule from './CounterModule';

    Vue.use(Vuex);

    export default new Vuex.Store({
      // Root State
      state: {
        counter: 0
      },

      mutations: {
      },
      getters: {
        // This Getter Name Is Exist In CounterModule.js
        tot(state){
          return state.counter;
        }
      },
      actions: {},
      modules: {
        mod : CounterModule
      }
    });


    CounterModule.js
    ----------------

    const  CounterModule = {
      state: {
        counter : 0
      },
      mutations:{
        increase(state){
          state.counter++;
        },
        decrease(state){
          state.counter--;
        }
      },
      getters:{
        // This Getter Name Is Exist In store.js
        tot(state){
          return state.counter;
        },
        // Access Root State
        counter(state) {
          return state.counter;
        }
      },
      actions:{
        increase(context){
          context.commit('increase');
        },
        decrease(context){
          context.commit('decrease');
        }
      }
    };

    export default CounterModule;


==> Solve [The Change Will Occur When Use The Module Inside Any Page]
------------

  CounterModule.js
  -----------------

  const  CounterModule = {
    namespaced : true, // Active The Namespace Firstly
    state: {
      counter : 0
    },
    mutations:{
      increase(state){
        state.counter++;
      },
      decrease(state){
        state.counter--;
      }
    },
    getters:{

      // This Getter Name Is Exist In store.js
      tot(state){
        return state.counter;
      },

      counter(state) {
        return state.counter;
      }
    },
    actions:{
      increase(context){
        context.commit('increase');
      },
      decrease(context){
        context.commit('decrease');
      }
    }
  };

  export default CounterModule;



  blog.vue
  ---------

  <template>
    <div class="pt-4">
      <button @click='increase()' class='btn btn-primary mr-2'>Increase</button>
      <button @click='decrease()' class='btn btn-primary'>Decrease</button>
      <p class="mt-3">
        {{getCounter}}
      </p>
    </div>
  </template>

  <script>

    export default{
      methods: {
        // Look Here The Access Of Module Functions Is Different
        increase(){
          return this.$store.dispatch('mod/increase');
        },
        decrease(){
          return this.$store.dispatch('mod/decrease');
        }
      },
      computed: {
        // If Used MapGetters When Use The NameSpace
        //...mapGetters('NameOfModule' , ['Getter1' , 'Getter2'...])

        // Look Here Too
        getCounter(){
          return this.$store.getters['mod/tot'];
        }
      },

      name: "Blog",
    }
  </script>
