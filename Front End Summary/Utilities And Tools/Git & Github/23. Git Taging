(1) Tagging
------------
==> Tags are ref's that point to specific points in Git history. Tagging is generally used to capture a point in history that is used for a marked version release (i.e. v1.0.1)


(2) A tag is like a branch that doesnâ€™t change. Unlike branches, tags, after being created, have no further history of commits. For more info on branches visit the git branch page. This document will cover the different kind of tags, how to create tags, listing all tags, deleting tags, sharing tags, and more.


(3) Creating a tag
-------------------
==> Syntax : git tag <tagname>
==> A common pattern of 'tagname' is to use version numbers like git tag v1.4

(4) Tags Types
---------------
==> Git supports two different types of tags, annotated and lightweight[EX: git tag v1.4] tags

==> Lightweight tags and Annotated tags differ in the amount of accompanying meta data they store

==> A best practice is to consider Annotated tags as public, and Lightweight tags as private

==> Annotated tags store extra meta data such as: the tagger name, email, and date. This is important data for a public release. Lightweight tags are essentially 'bookmarks' to a commit, they are just a name and a pointer to a commit, useful for creating quick links to relevant commits.


(4) Annotated Tags
-------------------
==> Example : git tag -a v1.4  or git tag -a v1.4 -m "my version 1.4"
==> are stored as full objects in the Git database. To reiterate, They store extra meta data such as: the tagger name, email, and date. Similar to commits and commit messages Annotated tags have a tagging message. Additionally, for security, annotated tags can be signed and verified with GNU Privacy Guard (GPG). Suggested best practices for git tagging is to prefer annotated tags over lightweight so you can have all the associated meta-data


(5) LightWeight Tags
---------------------
==> Example: git tag v1.4
==> Lightweight tags are created with the absence of the -a, -s, or -m options. Lightweight tags create a new tag checksum and store it in the .git/ directory of the project's repo.


(6) Listing All Tags
---------------------
==> git tag // List All Tags
==> git tag -l *.0 // List Specific Tags [EX: v1.0]


(7) Tagging Old Commits
------------------------
==> git tag will create a tag on the commit that HEAD is referencing. Alternatively git tag can be passed as a ref to a specific commit. This will tag the passed commit instead of defaulting to HEAD.

==> Syntax : git tag -a <tagName> <commitId> [EX: git tag -a v1.2 15027957951b64cf874c3557a0f3547bd83b3ff6] // Add Additonal Tag To Specific Commit


(8) ReTagging/Replacing Old Tags
---------------------------------
==> Syntax: git tag -a -f <versionName> <CommitId> [EX: git tag -a -f v0.1 1231cd1f7d88f9235c24bae7db2a0c56490c9c50]


(9) Pushing Tags to Remote [Github]
------------------------------------
==> Syntax: git push origin <versionName|tagName> [EX: git push origin v1.4]


(10) Deleting Tags
-------------------
==> Syntax: git tag -d <tagName> [EX: git tag -d v0.0] // Delete Specific Tag
==> EX: git tag | xargs git tag -d  // Delete All Tags
