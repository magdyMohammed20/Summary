(1) Polymorphism
--------------------
==> Here Attack Function Have Different Implementations In Child Classes
==> So Here Attack Function In Child Overrides Attack Function In Parent

Ex
---

    class Player {
        constructor(public name: string) { }
        attack(): void {
            console.log("Start Attack")
        }
    }

    class Amazon extends Player {
        constructor(public name: string, public spears: number) {
            super(name)
        }

        attack(): void {
            super.attack()
            console.log("Attack From Amazon Using Spear")
            this.spears -= 1
        }
    }

    const amz = new Amazon("Magdy", 100)

    console.log(amz.spears) // 100
    amz.attack() // "Start Attack" "Attack From Amazon Using Spear"
    console.log(amz.spears) // 99


(2) 'noImplicitOverride' Option In 'tsconfig.json'
----------------------------------------------------
==> If Set 'noImplicitOverride' To True It Make TS See The Previous Code Not Legal As It Prevent To Make Function Which Overrides The Parent Function

    'noImplicitOverride' : true


(3) But If 'noImplicitOverride' Set True And Want To Override The Parent Function Use 'Override' Keyword
--------------------------------------------------------------------------------------------------------------

    class Player {
        constructor(public name: string) { }
        attack(): void {
            console.log("Start Attack")
        }
    }

    class Amazon extends Player {
        // Override Here
        constructor(public override name: string, public spears: number) {
            super(name)
        }

        // Override Here
        override attack(): void {
            super.attack()
            console.log("Attack From Amazon Using Spear")
            this.spears -= 1
        }
    }

    const amz = new Amazon("Magdy", 100)


    console.log(amz.spears) // 100
    amz.attack() // "Start Attack" "Attack From Amazon Using Spear"
    console.log(amz.spears) // 99


(4) Override Function Or Property Must Be Found In Parent Class