(1) Mocking Requests
----------------------

==> Requests In Testing Like Using Axios Costs The Following
--------------------------------------------------------------
--> Cost Money
--> Requests Are Slow [For Waiting Data To Come From API]
--> When We Have Our App And API We Must Test The Both And Any Interaction Between Them Must Be Mocking And It Removes The Previous 2 Problems


(2) Mocking Axios Library (Use With followers.test.js)
-------------------------------------------------------
==> Create Folder '__mocks__' 
==> Inside '__mocks__' Create File With Name Of Thing That Want To Mock [EX: axios.js]
==> The Go To node_modules => react-scripts => scripts => utils => CreateJestConfig.js =>  [Change 'resetMocks' Variable To 'False']
==> Run 'npm test' Again


    Follower.js
    ------------

    import React , {useState , useEffect} from 'react'
    import axios from 'axios'

    function Followers() {

        const[followers , setFollowers] = useState([])

        useEffect(() => {
            getFllowers()
        }, [])

        const getFllowers = async() => {
            const {data} = await axios.get('https://randomuser.me/api/?results=5')
            setFollowers(data.results)
        }

        return (
            <div>
                {
                    followers.map((follower , index) => {
                        return (
                            <div data-testid={`follower-item-${index}`} style={{display: 'inline-block' , margin: '5px'}}>
                                <img src={follower.picture.large} />
                                <p>UserName : {follower.login.username}</p>
                                <p>FullName : {follower.name.title}.{follower.name.first} {follower.name.last}</p>
                            </div>
                        )
                    })
                }
            </div>
        )
    }

    export default Followers


    Followers.test.js
    ------------------

    import {render , screen} from '@testing-library/react'
    import Followers from './Followers';


    describe('Test Package Of Tests' , () => {
        // Test Will Pass
        it("Test Fllowers Listing With Async/Await" , async() => {
            render(<Followers/>);
            const divElement = await screen.findAllByTestId(/follower-item/i)
            screen.debug() // For Display Content Of Component In Console
            expect(divElement.length).toBeGreaterThanOrEqual(2)
        })
    })




    axios.js
    ----------

    const mockResponse = {
        data:{
            results: [
                {
                    name: {
                        first: 'Magdy',
                        last: 'Mohammed'
                    },
                    picture: {
                        large: 'https://www.randomuser.me/api/portraits/men/39.png'
                    },
                    login: {
                        username: 'THEGOAT'
                    }
                }
                ,
                {
                    name: {
                        first: 'Mohammed',
                        last: 'Ali'
                    },
                    picture: {
                        large: 'https://www.randomuser.me/api/portraits/men/30.png'
                    },
                    login: {
                        username: 'THEGOAT2'
                    }
                }
            ]
        }
    }

    export default {
        get: jest.fn().mockResolvedValue(mockResponse)
    }


-------------------------------------------------------------------------------------------------------------
Note : Instead Of Changing 'resetMocks' Variable In node_modules You Can Add This To 'Package.json' Instead

    "jest": {
        "collectCoverageFrom": [
        "src/**/*.{js,jsx,ts,tsx}"
        ],
        "resetMocks": false
    }
------------------------------------------------------------------------------------------------------------
