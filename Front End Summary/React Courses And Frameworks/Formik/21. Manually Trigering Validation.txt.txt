(1) Formik Provides 2 Helper Methods To Manually trigering validation [validateField , validateForm]
----------------------------------------------------------------------
==> First Step Is To Create Function That Children For The 'Formik' Component And Return The 'Form' Component This Function Argument Is An Object That Contains Some Properties And Methods

==> Create 2 Buttons That Validate Specific Field['email'] And All Fields



EX : Validate Email Or Validate All But Not Work So We Will Use setTouched And setFieldTouched Instead
----

	Form.js
	---------
	
	import React from 'react'
	import './Form.css'
	import { Formik, Form, Field, ErrorMessage, FastField } from 'formik'
	import * as Yup from 'yup'

	let initialValues = { name: '', email: '', channel: '', address: '' }

	let onSubmit = val => {
	    console.log(`Name Is `, `${val.name}`)
	    console.log(`Email Is `, `${val.email}`)
	    console.log(`Channel Is `, `${val.channel}`)
	    console.log(`Address Is `, `${val.address}`)
	}


	let validationSchema = Yup.object({
	    name: Yup.string().required('Name Is Required'),
	    email: Yup.string().email('Invalid Email Format').required('Email Is Required'),
	    channel: Yup.string().required('Channel Is Required'),
	    address: Yup.string().required('Address Is Required')
	})
	export default function FormikForm() {
	    return (
		<Formik
		    initialValues={initialValues}
		    onSubmit={onSubmit}
		    validationSchema={validationSchema}
		>
		    {
		        formik => {
		            console.log(formik)
		            return (
		                <Form>
		                    <div>
		                        <label htmlFor="name">Name</label>
		                        <Field
		                            type="text"
		                            name="name"
		                            id="name"
		                        />
		                        <div style={{ color: 'red' }}>
		                            <ErrorMessage name="name" />
		                        </div>
		                    </div>
		                    <div>
		                        <label htmlFor="email">Email</label>
		                        <Field
		                            type="email"
		                            name="email"
		                            id="email"
		                        />
		                        <div style={{ color: 'red' }}>
		                            <ErrorMessage name="email" />
		                        </div>
		                    </div>
		                    <div>
		                        <label htmlFor="channel">Channel</label>
		                        <Field
		                            type="text"
		                            name="channel"
		                            id="channel"
		                        />
		                        <div style={{ color: 'red' }}>
		                            <ErrorMessage name="channel" />
		                        </div>
		                    </div>

		                    <div>
		                        <label htmlFor='address'>address</label>
		                        <FastField name='address'>
		                            {

		                                (props) => {

		                                    const { field, form, meta } = props
		                                    return (
		                                        <div>
		                                            <input id='address' {...field} />
		                                            {meta.touched && meta.error ? <div>{meta.error}</div> : null}
		                                        </div>
		                                    )
		                                }
		                            }
		                        </FastField>
		                    </div>
		                    <button onClick={() => formik.validateField('email')}>Validate Email</button>
		                    <button onClick={() => formik.validateForm()}>Validate All</button>
		                    <button type="submit">Submit</button>
		                </Form>
		            )
		        }
		    }
		</Formik>
	    )
	}




	App.js
	-------
	
	import React, { Component } from 'react';
	import './App.css';
	import FormikForm from './Components/Form'
	class App extends Component {

	  render() {

	    return (
	      <div className="App">
		<FormikForm />
	      </div >

	    );
	  }
	}

	export default App;





EX : Email And All Fields Validation Work With 'setTouched' And 'setFieldTouched'
----


	Form.js
	--------
	
	import React from 'react'
	import './Form.css'
	import { Formik, Form, Field, ErrorMessage, FastField } from 'formik'
	import * as Yup from 'yup'

	let initialValues = { name: '', email: '', channel: '', address: '' }

	let onSubmit = val => {
	    console.log(`Name Is `, `${val.name}`)
	    console.log(`Email Is `, `${val.email}`)
	    console.log(`Channel Is `, `${val.channel}`)
	    console.log(`Address Is `, `${val.address}`)
	}


	let validationSchema = Yup.object({
	    name: Yup.string().required('Name Is Required'),
	    email: Yup.string().email('Invalid Email Format').required('Email Is Required'),
	    channel: Yup.string().required('Channel Is Required'),
	    address: Yup.string().required('Address Is Required')
	})
	export default function FormikForm() {
	    return (
		<Formik
		    initialValues={initialValues}
		    onSubmit={onSubmit}
		    validationSchema={validationSchema}
		>
		    {
		        formik => {
		            console.log(formik)
		            return (
		                <Form>
		                    <div>
		                        <label htmlFor="name">Name</label>
		                        <Field
		                            type="text"
		                            name="name"
		                            id="name"
		                        />
		                        <div style={{ color: 'red' }}>
		                            <ErrorMessage name="name" />
		                        </div>
		                    </div>
		                    <div>
		                        <label htmlFor="email">Email</label>
		                        <Field
		                            type="email"
		                            name="email"
		                            id="email"
		                        />
		                        <div style={{ color: 'red' }}>
		                            <ErrorMessage name="email" />
		                        </div>
		                    </div>
		                    <div>
		                        <label htmlFor="channel">Channel</label>
		                        <Field
		                            type="text"
		                            name="channel"
		                            id="channel"
		                        />
		                        <div style={{ color: 'red' }}>
		                            <ErrorMessage name="channel" />
		                        </div>
		                    </div>

		                    <div>
		                        <label htmlFor='address'>address</label>
		                        <FastField name='address'>
		                            {

		                                (props) => {

		                                    const { field, form, meta } = props
		                                    return (
		                                        <div style={{ color: 'red' }}>
		                                            <input id='address' {...field} />
		                                            {meta.touched && meta.error ? <div>{meta.error}</div> : null}
		                                        </div>
		                                    )
		                                }
		                            }
		                        </FastField>
		                    </div>
		                    <button type="button" onClick={() => formik.setFieldTouched('email')}>Validate Email</button>
		                    <button type="button" onClick={() => formik.setTouched({
		                        name: true,
		                        email: true,
		                        channel: true,
		                        address: true
		                    })}>Validate All</button>
		                    <button type="submit">Submit</button>
		                </Form>
		            )
		        }
		    }
		</Formik>
	    )
	}
	
	

	App.js
	-------
	
	import React, { Component } from 'react';
	import './App.css';
	import FormikForm from './Components/Form'
	class App extends Component {

	  render() {

	    return (
	      <div className="App">
		<FormikForm />
	      </div >

	    );
	  }
	}

	export default App;
