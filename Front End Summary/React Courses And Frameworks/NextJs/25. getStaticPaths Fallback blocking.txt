(1) fallback: blocking
---------------------
==> The Paths Returned From 'getStaticPaths' Will Be Rendered To Html At Build Time By 'getStaticProps'
==> Any Paths Not Returned By 'getStaticPaths' Will Not Result In 404 Page


(2) Steps Using fallback: 'blocking'
---------------------------------------
==> First: Delete '.next' Folder
==> Change fallback Value In getStaticPaths In [postId].js To [fallback: 'blocking']
==> Build App Using [yarn build] Will Note That It Statically Generates Pages in '.next/server/pages/posts' 
==> Then Run [yarn start] And See In Browser
==> If Go To [localhost:3000/posts/1] Then Go To [localhost:3000/posts/2] Will Note That In Network Tab File Load Time Increased


    /pages/posts/index.js
    ------------------------

    import Link from 'next/link'

    export default function postList({ posts }) {

        return (
            <>
                {
                    posts.map(({ id, title, body }) => <div key={id}>
                        <Link href={`/posts/${id}`} passHref>
                            <h1>{title}</h1>
                        </Link>
                        <p>{body}</p>
                    </div>)
                }
            </>
        )
    }

    export async function getStaticProps() {
        const response = await fetch('https://jsonplaceholder.typicode.com/posts')
        const data = await response.json()

        return {
            props: {
                posts: data.slice(0, 3)
            }
        }
    }


    /pages/posts/[postId].js
    -------------------------

    export default function SingleProduct({ post }) {
        return <>
            <h1>{post.title}</h1>
            <p>
                {post.body}
            </p>
        </>
    }

    export async function getStaticPaths() {

        return {
            paths: [
                {
                    params: {
                        postId: '1'
                    }
                },
                {
                    params: {
                        postId: '2'
                    }
                },
                {
                    params: {
                        postId: '3'
                    }
                }
            ],
            fallback: 'blocking'
        }
    }

    export async function getStaticProps(context) {

        const { params } = context
        const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${params.postId}`)
        const data = await response.json()

        if (!data.id) {
            return {
                notFound: true
            }
        }

        return {
            props: {
                post: data
            }
        }
    }


(3) When Use fallback: 'blocking'
-----------------------------------
==> If Want To Load Page Without Loading Indicator If Load Time Is Few Milliseconds
==>  Some Web Crawlers Didn't Support Js The Loading Page Would Be Rendered And The Fullpage Would Be Loaded Which Was Causing Problem