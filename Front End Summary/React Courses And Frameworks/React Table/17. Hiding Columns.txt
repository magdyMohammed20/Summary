(1) Hiding Columns
-------------------

==> Step1: Destruct 'allColumns' And 'getToggleHideAllColumnsProps' From 'tableInstance'
==> Step2: Import 'Checkbox' Component That We Create It In 'Selecting Rows' File
==> Step3: Use 'Checkbox' Component Before The Table For Toggle All Columns
==> Step4: Add Toggle Checkbox For Every Isolated Column


EX
---

    HidingColumns.js
    ------------------

    import React , {useMemo} from 'react'
    import {useTable} from 'react-table'     
    import {COLUMNS} from './Columns'        
    import Checkbox from './Checkbox' // Step2: Import 'Checkbox' Component That We Create It In 'Selecting Rows' File
    import MOCK_DATA from './MOCK_DATA.json' 
    import './style.css'

    function BasicTable() {

        const columns = useMemo(() => COLUMNS , [])
        const data = useMemo(() => MOCK_DATA , [])

        const tableInstance = useTable({ columns,data })
        
        // Step1: Destruct 'allColumns' And 'getToggleHideAllColumnsProps' From 'tableInstance'
        const {
            getTableProps,
            getTableBodyProps,
            headerGroups,
            rows,
            allColumns,
            getToggleHideAllColumnsProps,
            prepareRow,
        } = tableInstance

        return (
            <> 
                {/* Step3: Use 'Checkbox' Component Before The Table For Toggle All Columns */}
                <div>
                    <Checkbox {...getToggleHideAllColumnsProps()}/> Toggle All
                </div>

                {/* Step4: Add Toggle Checkbox For Every Isolated Column */}
                {
                    allColumns.map(column => (
                        <span key={column.id}>
                            <label>
                                <input type='checkbox' {...column.getToggleHiddenProps()}/>
                                {column.Header}
                            </label>
                        </span>
                    ))
                }
                <table {...getTableProps()}>
                    <thead>
                        {
                            headerGroups.map(headerGroup => (
                                <tr {...headerGroup.getHeaderGroupProps()}>
                                    {
                                        headerGroup.headers.map(column => (
                                            <th {...column.getHeaderProps()}>
                                                {column.render('Header')}
                                            </th>
                                        ))
                                    }
                                </tr>
                            ))
                        }
                    </thead>
                    <tbody {...getTableBodyProps()}>
                        {
                            rows.map(row => {
                                prepareRow(row)

                                return (
                                    <tr {...row.getRowProps()}>
                                        {
                                            row.cells.map(cell => {
                                                return (
                                                    <td {...cell.getCellProps()}>
                                                        {cell.render('Cell')}
                                                    </td>
                                                )
                                            })
                                        }
                                    </tr>
                                )
                            })
                        }
                    </tbody>
                </table>
            </>
        )
    }

    export default BasicTable


    Checkbox.js
    -------------

    import React from 'react'

    const Checkbox = React.forwardRef(
        ({ indeterminate, ...rest }, ref) => {
        const defaultRef = React.useRef()
        const resolvedRef = ref || defaultRef
    
        React.useEffect(() => {
            resolvedRef.current.indeterminate = indeterminate
        }, [resolvedRef, indeterminate])
    
        return (
            <>
            <input type="checkbox" ref={resolvedRef} {...rest} />
            </>
        )
        }
    )

    export default Checkbox