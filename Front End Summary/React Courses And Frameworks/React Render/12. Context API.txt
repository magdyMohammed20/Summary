(1) Ways To Cause Re-Render
-----------------------------
==> Component Calls useState Setter Function Or useReducer Dispatch Function
==> If Parent Component Re-Render
==> React Context API


EX (If Parent Component Re-Render All Children Re-Render Too)
---

    UseState.js
    -------------

    import React, {useState} from 'react'
    import {ChildA} from './Child'

    // Create Context Provider
    export const countContext = React.createContext();
    const CountProvider = countContext.Provider;

    export const UseState = () => {
        const [count , setCount] = useState(0)

        console.log('Parent Re-Render')
        return (
            <div>
                <button onClick={() => setCount(c => c + 1)}>{count}</button>
                <CountProvider value={count}>
                    <ChildA/>
                </CountProvider>
            </div>
        )
    }



    Child.js
    ---------

    import React,{useContext} from 'react'
    import {countContext} from './UseState'

    export function ChildA() {
        console.log('Child A Re-Render')
        return (
            <div>
                Child A
                <ChildB/> 
            </div>
        )
    }

    export function ChildB() {
        console.log('Child B Re-Render')
        return (
            <div>
                Child B
                <ChildC/> 
            </div>
        )
    }


    export function ChildC() {
        const count = useContext(countContext)

        console.log('Child C Re-Render')
        return (
            <div>
                Child C {count}
            </div>
        )
    }